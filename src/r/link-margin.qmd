---
title: "Link Margin Analysis"
format: html
editor: visual
---

```{r echo = FALSE}
suppressPackageStartupMessages({
  library(tidyverse)
  library(knitr)
  library(jsonlite)
  library(igraph)
  library(rollupTree)
  library(magrittr)
  library(DiagrammeR)
})

source("link-margin.R")

path <- "../../build/results/firesat-telecom/"

edges <- read_json(paste0(path, "edges.json"))$results$bindings
values <- read_json(paste0(path, "values.json"))$results$bindings
calls <- read_json(paste0(path, "calls.json"))$results$bindings
```

## Asserted Quantity Values

```{r echo = FALSE}
vdf <- data.frame(
  quantity =  unlist(Map(f = function(x) x$quantity$value, values)),
  value =  unlist(Map(f = function(x) list(value = x$value$value), values)),
  unit =  unlist(Map(f = function(x) list(unit = x$unit$value), values)),
  stringsAsFactors = FALSE
)
knitr::kable(vdf)
```

## Constraint Calls

```{r echo = FALSE}
dfrow <- function(x) data.frame(
  quantity = x$quantity$value,
  call = x$call$value,
  arg_name = x$arg_name$value,
  arg_quantity = x$arg_quantity$value,
  encoding_scheme = if (is.null(es <- x$encoding_scheme)) NA else es$value,
  stringsAsFactors = FALSE
)
cdf <- Reduce(f = rbind, x = Map(f = dfrow, calls)) |>
  arrange(quantity, call, arg_name)
knitr::kable(cdf)
```

### Orchestration Graph

```{r echo = FALSE}
elist <- Reduce(f = c, x = Map(f = function(x) c(x$child$value, x$parent$value), edges), init = c())
ograph <- graph_from_edgelist(matrix(elist, ncol = 2, byrow = TRUE))
ograph
```

### Calculation Order

```{r echo = FALSE}
o <- data.frame(quantity = names(topo_sort(ograph)), order = 1:length(V(ograph)))
knitr::kable(o)
```




### Calculation Wrapper

```{r}
calculate_quantity <- function(quantity, cdata, vdata) {
  call_info <- cdata[cdata$quantity == quantity, ]
  call = call_info[1, "call"]
  call_info_values <- merge(x = call_info, y = vdata, by.x = "arg_quantity", by.y = "quantity")
  arg_list <- Map(f = function(n, v, u) list(value = as.numeric(v), unit = u),
                  call_info_values$arg_name, call_info_values$value, call_info_values$unit)
  encoding_scheme <- call_info[1, "encoding_scheme"]
  if (!is.na(encoding_scheme)) arg_list$encodingScheme = encoding_scheme
  r <- do.call(call, arg_list)
  rbind(vdata, c(quantity = quantity, value = r$value, unit = r$unit))
}
```

### Methods For Rollup

```{r}
update_values <- function(v, t, sl) {
  if (length(sl) == 0) v else calculate_quantity(quantity = t, cdata = cdf, vdata = v)
}
validate_ds <- function(t, d) TRUE
validate_tree <- function(t) is_dag(t)
result <- rollup(ograph, vdf, update_values, validate_ds, validate_tree)
knitr::kable(result)
```

### Save Final Result

```{r}
write_json(result, paste0(path, "downlink.json"), pretty = TRUE)
```

## State Effects Diagram

```{r}
se_el <- do.call(rbind, lapply(edges, FUN = function(l) c(l$child_label$value, l$parent_label$value)))
se_vl = union(se_el[,1], se_el[,2])
se_nodes_df <- create_node_df(n = length(se_vl), type = NULL, label = se_vl)
se_edges_df <- create_edge_df(from = match(se_el[,1], se_nodes_df$label), to = match(se_el[,2], se_nodes_df$label))
se_g <- create_graph(nodes_df = se_nodes_df, edges_df = se_edges_df)
render_graph(se_g)
```

### Visualize Ograph


```{r}
library(visNetwork)
library(tidyr)

data <- toVisNetworkData(ograph)
visnodes <- data$nodes %>%
  mutate(label = sub(".*#", "", label)) %>% 
  mutate(id = factor(id, levels = o$quantity)) %>%
  arrange(id)

visedges <- data$edges %>% 
  mutate(arrows = c("to")) 

visNetwork(nodes = visnodes, edges = visedges) %>%
  visHierarchicalLayout(direction = "RL")


```


## State Effects Models in R

### Constants

Boltzman's Constant in dB:

```{r}
k_dB
```

### Utility Functions

```{r}
dB
```

```{r}
dBinv
```

```{r}
erfcinv
```

### Space Loss

```{r}
spaceLoss
```

### Information Rate

```{r}
informationRate
```

### Minimum Eb/N0

```{r}
minEbOverN0
```

### Irradiance

```{r}
irradiance
```

### Array G/T

```{r}
arrayGOverT
```

### Eb/N0

```{r}
ebOverN0
```

### Link Margin

```{r}
linkMargin
```
